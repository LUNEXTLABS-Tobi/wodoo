#!/bin/bash
# CALL THIS SCRIPT BY THE MAIN ODOO SCRIPT
set -e
set +x

if [[ -z "$ODOO_MANAGER_STARTED_ONCE" ]]; then
	echo "Please use odoo patch <ARGS> to use this script."
	exit -1
fi

CUSTOMSDIR="$(cd "$ODOO_HOME/admin/module_tools"; python -c "from odoo_config import customs_dir; print customs_dir()")"
COMMIT_FILE="$CUSTOMSDIR/odoo.commit"
ODOO_GIT="$ODOO_HOME/repos/odoo"
ODOO_LOCAL_DIR=odoo
ODOO_LOCAL="$CUSTOMSDIR/$ODOO_LOCAL_DIR"
IGNORE_FILE="$CUSTOMSDIR/.gitignore"
PATCHDIR="$CUSTOMSDIR/common/patches/$ODOO_VERSION"

function how_to_use {
	echo
	echo "Prerequisites:"
	echo "--------------------------------------------"
	echo ""
	echo "- odoo commit defined in $COMMIT_FILE"
	echo "- odoo repo cloned at $ODOO_HOME/odoo.git"
	echo
	echo "Commands"
	echo "--------------------------------------------"
	echo
	echo " odoo patch reset: resets odoo to commit version"
	echo ""
	echo " odoo patch prepare: makes git repo at odoo and applies default patches like remove install notifications"
	echo ""
	echo " odoo patch apply: applies patch-file from parameter 2"
	echo ""
	echo " odoo patch list: lists all patches"
	echo ""
	echo " odoo patch apply_all: applies all patches; no git repo after-wards"
	echo ""
	echo " odoo patch create: creates the patch"
	echo ""
	echo " odoo patch preview: shows what is patched"
	echo
	echo 
	echo "Workflow new patch"
	echo "--------------------------------------------"
	echo ""
	echo   "cd odoo"
	echo   "../odoo patch prepare"
	echo   "<adapt odoo>"
	echo   "../odoo patch preview"
	echo   "../odoo create <name to describe>"
	echo
	echo "Workflow - reset - apply all patches and remove git"
	echo "--------------------------------------------"
	echo
	echo "  odoo patch apply_all "
	echo
	echo
    exit -1
}


if [[ "$*" == "" ]]; then
	how_to_use
	exit -1
fi

function exists_odoo_commit() {
	if [[ ! -f "$COMMIT_FILE" ]]; then
		echo "Commit file $COMMIT_FILE not found!"
		exit -1
	fi
}

case $1 in
	reset)
		set -e

		cd "$ODOO_GIT" || exit -1

		exists_odoo_commit

		git checkout -f "$(cat "$COMMIT_FILE")"
		git clean -xdff

		rsync "$ODOO_GIT/" "${ODOO_LOCAL:?}/" -ar --delete --info=progress2
		chown -R "$DEFAULT_USER" "${ODOO_LOCAL:?}" 
		rm -Rf "${ODOO_LOCAL:?}/.git" || true

		;;

	gitify)
		#needed for applying patches

		cd "$ODOO_HOME" || exit -1
		grep -q "$ODOO_LOCAL_DIR/.git" "$IGNORE_FILE" || {
			echo "$ODOO_LOCAL_DIR/.git" >> "$IGNORE_FILE"
		}

		cd "$ODOO_LOCAL" || exit -1

		if [[ -f .git || -d .git ]]; then
			rm -Rf .git
		fi

		git init .
		git add .
		git config --global user.email 'odoo'
		git commit -qam 'initial' 

		;;

	gitify_on_need)

		cd "$ODOO_LOCAL" || exit -1

		if [[ ! -d .git && ! -f .git ]]; then
			"$0" gitify
		fi

		;;

	ungitify)

		cd "$ODOO_LOCAL" || exit -1
		rm .git -Rf || exit -1

		;;

	default_patches)
		echo ""
		echo ""
		echo "Applying default patches"
		echo "-remove module install notfications"
		echo ""
		echo ""

		cd "$ODOO_HOME/admin/module_tools" || exit -1
		python <<-EOF
			import module_tools
			module_tools.remove_module_install_notifications("$CUSTOMSDIR")
		EOF
		echo ""
		echo "Apply default patches DONE"
		echo ""
		echo ""
		echo ""
		;;

	prepare)
		set -e

		"$0" reset
		"$0" gitify

		"$0" default_patches

		cd "$ODOO_LOCAL" || exit -1
		git add .
		git commit -qam "removed install notifications"
		"$0" list | while read -r file
		do
			"$0" apply "$file" || exit -1
		done
		git add .
		git commit -qam "applied all current patches"

		echo
		echo
		echo "You can now do changes; use odoo patch preview to display your changes."

		;;

	preview)

		cd "$ODOO_LOCAL" || exit -1

		git add --intent-to-add .
		git diff --binary

		;;

	create)

		if [[ -z "$2" ]]; then
			echo "Please provide a name"
			exit -1
		fi

		mkdir -p "$PATCHDIR"
		PATCHFILE="$PATCHDIR/${2// /_}.patch"

		"$0" preview > "$PATCHFILE"

		rm -Rf "$ODOO_LOCAL/.git"

		echo 
		echo 
		echo "Created patch file: $PATCHFILE"

		;;

	apply)

		"$0" gitify_on_need

		cd "$ODOO_LOCAL" || exit -1

		git apply "$2" || {
			echo
			echo
			echo "PATCH NOT APPLIED: $2"
			echo 
			echo 
			exit -1
		}

		;;

	list)
		find "$CUSTOMSDIR" -name '*.patch' |grep "\/$ODOO_VERSION\/" | while read -r f
		do
			echo "$f"
		done
		;;

	apply_all)
		"$0" reset
		"$0" default_patches
		"$0" list | while read -r file
		do
			echo "Applying patch $file"
			"$0" apply "$file" || exit -1
		done
		"$0" ungitify
		echo 
		echo "Successfully applied all patches and cleand .git directory."
		echo 

		;;

	*)
		echo "Invalid command: $1"
		exit -1
		;;

esac
