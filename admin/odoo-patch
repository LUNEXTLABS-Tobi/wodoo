#!/usr/bin/env python
# CALL THIS SCRIPT BY THE MAIN ODOO SCRIPT
import tempfile
import os
import sys
import argh
import shutil
import inspect
import types
from argh import arg
from module_tools import odoo_config
from module_tools.module_tools import remove_module_install_notifications
from inspect import getmembers, isfunction
from tools import __system
from tools import __find_files
from tools import __safe_filename

def check_started_by_odoo_script():
    if not os.getenv("ODOO_MANAGER_STARTED_ONCE", ""):
        print("Please use odoo patch <ARGS> to use this script.")
        sys.exit(1)


current_dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory
CUSTOMSDIR = odoo_config.customs_dir()
COMMIT_FILE = os.path.join(CUSTOMSDIR, 'odoo.commit')
ODOO_GIT = os.path.join(os.getenv("ODOO_HOME"), 'repos/odoo')
ODOO_LOCAL_DIR = "odoo"
ODOO_LOCAL = os.path.join(CUSTOMSDIR, "odoo")
IGNORE_FILE = os.path.join(CUSTOMSDIR, '.gitignore')
PATCHDIR = os.path.join(CUSTOMSDIR, "common/patches", os.getenv("ODOO_VERSION"))
SUB_GIT = os.path.join(ODOO_LOCAL, '.git')

def help():
    print("Prerequisites:")
    print("--------------------------------------------")
    print("")
    print("- odoo commit defined in $COMMIT_FILE")
    print("- odoo repo cloned at $ODOO_HOME/odoo.git")
    print("Commands")
    print("--------------------------------------------")
    print(" odoo patch reset: resets odoo to commit version")
    print("")
    print(" odoo patch prepare: makes git repo at odoo and applies default patches like remove install notifications")
    print("")
    print(" odoo patch apply: applies patch-file from parameter 2")
    print("")
    print(" odoo patch list: lists all patches")
    print("")
    print(" odoo patch apply-all: applies all patches; no git repo after-wards")
    print("")
    print(" odoo patch preview: shows what is patched")
    print("")
    print(" odoo patch create: creates the patch")
    print("")
    print("Workflow new patch")
    print("--------------------------------------------")
    print("")
    print("cd odoo")
    print("../odoo patch prepare")
    print("<adapt odoo>")
    print("../odoo patch preview")
    print("../odoo create <name to describe>")
    print("Workflow - reset - apply all patches and remove git")
    print("--------------------------------------------")
    print("  odoo patch apply-all ")

def exists_odoo_commit():
    if not os.path.exists(COMMIT_FILE):
        print("Commit file $COMMIT_FILE not found!")
        sys.exit(1)

def get_odoo_commit():
    with open(COMMIT_FILE, 'r') as f:
        content = f.read()
    return content.strip()

def reset():
    exists_odoo_commit()
    print("Setting repo to commit {}".format(get_odoo_commit()))
    __system([
        "git",
        "checkout",
        "-f",
        get_odoo_commit()
    ], cwd=ODOO_GIT)
    print("Cleaning odoo repo...")
    __system([
        "git",
        "clean",
        "-xdff",
    ], cwd=ODOO_GIT)
    print("Rsyncing odoo-repo...")
    __system([
        "rsync",
        ODOO_GIT + "/",
        ODOO_LOCAL + "/",
        '-ar',
        '--delete-after',
    ], cwd=ODOO_GIT, suppress_out=False)
    print("CHOWN odoo-repo...")
    __system([
        'chown',
        '-R',
        os.getenv("OWNER_UID"),
        ODOO_LOCAL,
    ], cwd=ODOO_GIT)
    print("Cutting off local git")
    __system([
        'rm',
        '-Rf',
        SUB_GIT,
    ], cwd=ODOO_LOCAL)

def __read_file(path, error=True):
    if not os.path.exists(path):
        if not error:
            return ""
    with open(path, 'r') as f:
        return f.read()

def __write_file(path, content):
    with open(path, 'w') as f:
        f.write(content)

def __append_line(path, line):
    if not os.path.exists(path):
        content = ""
    else:
        with open(path, 'r') as f:
            content = f.read().strip()
    content += "\n" + line
    with open(path, 'w') as f:
        f.write(content)

def _gitify():
    if ODOO_LOCAL_DIR not in __read_file(IGNORE_FILE):
        __append_line(IGNORE_FILE, ODOO_LOCAL_DIR)

    if os.path.exists(SUB_GIT):
        shutil.rmtree(SUB_GIT)

    print("Making local git repo... in {}".format(ODOO_LOCAL))
    __system(["git", "init", "."], cwd=ODOO_LOCAL)
    print("Adding files...")
    __system(["git", "add", "."], cwd=ODOO_LOCAL)
    __system(["git", "config", "user.email", os.getenv("USER")], cwd=ODOO_LOCAL)
    __system(["git", "commit", "-qam", "initial"], cwd=ODOO_LOCAL)
    print("Done")

def _gitify_on_need():
    if not os.path.exists(SUB_GIT):
        _gitify()

def _ungitify():
    if os.path.exists(SUB_GIT):
        shutil.rmtree(SUB_GIT)

def _default_patches():
    print("Applying default patches")
    print("-remove module install notfications")

    remove_module_install_notifications(CUSTOMSDIR)
    print("Apply default patches DONE")

def prepare():
    reset()
    _gitify()
    _default_patches()

    __system(["git", "add", "."], cwd=ODOO_LOCAL)
    try:
        __system(["git", "commit", "-qam", "removed install notifications"], cwd=ODOO_LOCAL)
    except Exception:
        print("Perhaps no install notifications")
    for filepath in _list():
        apply(filepath)
    __system(["git", "add", "."], cwd=ODOO_LOCAL)
    __system(["git", "commit", "-qam", "applied all current patches"], cwd=ODOO_LOCAL)
    print("You can now do changes; use odoo patch preview to display your changes.")

def _get_diff():
    __system(["git", "add", "--intent-to-add", "."], cwd=ODOO_LOCAL)
    diff = __system(["git", "diff", "--binary"], cwd=ODOO_LOCAL, suppress_out=True)
    return diff

def preview():
    diff = _get_diff()
    filename = tempfile.mktemp(suffix='.')
    with open(filename, 'w') as f:
        f.write(diff)
    os.system('cat "{}" | colordiff'.format(filename))

def create(name):
    if not os.path.exists(PATCHDIR):
        os.makedirs(PATCHDIR)
    PATCHFILE = os.path.join(PATCHDIR, __safe_filename(name) + ".patch")

    diff = _get_diff()
    if diff:
        with open(PATCHFILE, 'w') as f:
            f.write(diff)
    _ungitify()
    print("Created patch file: " + PATCHFILE)

def apply(filepath):
    _gitify_on_need()
    __system(["git", "apply", filepath], cwd=ODOO_LOCAL)

def _list(absolute_path=True):
    V = os.getenv("ODOO_VERSION")
    for filename in __find_files(CUSTOMSDIR, "-name", "*.patch"):
        if '/migration/' in filename:
            continue
        if V in filename:
            if not absolute_path:
                filename = os.path.relpath(filename, CUSTOMSDIR)
            yield filename
def list():
    for filename in _list(absolute_path=False):
        print(filename)

def apply_all():
    reset()
    _default_patches()
    for filepath in _list():
        print "Applying patch " + filepath
        apply(filepath)
    _ungitify()
    print("Successfully applied all patches and cleand .git directory.")

def _setupArgs():
    parser = argh.ArghParser()
    commands = []
    module = sys.modules[__name__]
    for member in getmembers(module, inspect.isfunction):
        name, member = member
        if isinstance(member, types.FunctionType):
            if not name.startswith('_') and (len(name) > 2 or name in ['up']):
                commands.append(member)

    parser.add_commands(commands)

    return parser


if __name__ == "__main__":
    parser = _setupArgs()
    check_started_by_odoo_script()
    try:
        parser.dispatch()
    finally:
        pass
