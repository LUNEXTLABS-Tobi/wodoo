#!/usr/bin/python
import sys
import re
import os
import sys
import logging
import importlib
import subprocess
import time
import inspect
import yaml
from copy import deepcopy
from threading import Thread
from Queue import Queue
from logging import FileHandler
from optparse import OptionParser
from module_tools.myconfigparser import MyConfigParser
from module_tools import odoo_config
from module_tools import set_ownership_exclusive

try:
    from pudb import set_trace
except Exception:
    set_trace = None
current_dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory
sys.path.append(os.path.join(current_dir, 'python_wait'))
import wait

PLATFORM_OSX = "OSX"
PLATFORM_LINUX = "Linux"

parser = OptionParser(
    description="""Odoo Administration Script
"""
)
set_trace()
parser.add_option(
    '-f', '--force', action='store_true', default=False, help="Force actions if asked"
)
parser.add_option(
    '--verbose', action='store_true', default=False,
)
parser.add_option(
    '--no-verbose', action='store_true', default=False,
)
(options, args) = parser.parse_args()
command_parameters = args[1:] if len(args) > 1 else []

if options.verbose and options.no_verbose:
    print("Please set either verbose or not verbose.")
    sys.exit(1)

dirs = {
    'odoo_home': '',
    'proxy_configs_dir': 'run/proxy',
    'settings.d': 'run/settings.d',
    'host_working_dir': '',
    'run': 'run',
    'run/proxy': 'run/proxy',
    'run/restore': 'run/restore',
    'machines': 'machines',
    'machines/proxy': 'machines/proxy',
    'customs': '',
}

files = {
    'docker_compose': 'run/docker-compose.yml',
    'settings': 'run/settings',
    'odoo_instances': 'run/odoo_instances',
    'config/docker-compose.yml': 'config/docker-compose.yml',
    'run/odoo_debug.txt': 'run/odoo_debug.txt',
    'machines/proxy/odoo_instance.conf': 'machines/proxy/odoo_instance.conf',
}
commands = {
    'manage': 'admin/odoo-admin',
    'dc': "/usr/local/bin/docker-compose -p $CUSTOMS -f $docker_compose_file",
}

def get_logger():
    FORMAT = '[%(levelname)s] %(name) -12s %(asctime)s\n%(message)s'
    logging.basicConfig(filename="/dev/stdout", format=FORMAT)
    logging.getLogger().setLevel(logging.DEBUG)
    logger = logging.getLogger('')  # root handler
    formatter = logging.Formatter(FORMAT)
    return logger


logger = get_logger()


def trace():
    if set_trace:
        set_trace()

def _get_platform():
    if os.getenv("PLATFORM", "") in ['Darwin', 'OSX']:
        return PLATFORM_OSX
    else:
        return PLATFORM_LINUX

def _startup():
    trace()
    dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory
    dir = os.path.dirname(dir)
    dirs['odoo_home'] = dir

    def make_absolute(d):
        for k, v in d.items():
            if not v.startswith('/'):
                d[k] = os.path.join(dir, v)
    make_absolute(dirs)
    make_absolute(files)
    make_absolute(commands)
    os.environ['ODOO_MANAGER_STARTED_ONCE'] = '1'
    os.environ['ODOO_COMPOSE_VERSION'] = "3.3"
    os.environ['PGPASSFILE'] = "/tmp/.pgpass" # must match the executing script
    os.environ['PGHOST'] = "$DB_HOST"
    os.environ['PGPORT'] = "$DB_PORT"
    os.environ['PGUSER'] = "$DB_USER"
    os.environ['LOCAL_WORKING_DIR'] = "{}/{}".format(os.getenv("EXTERNAL_ROOT"), os.getenv("WORKING_DIR"))  # the working directory accessible from container of this script.
    dirs['host_working_dir'] = os.environ['LOCAL_WORKING_DIR']

def _check_working_dir_customs_mismatch():
    # Checks wether the current working is in a customs directory, but
    # is not matching the correct customs. Avoid creating wrong tickets
    # in the wrong customizations.

    working_dir = dirs['host_working_dir']
    while not os.path.isfile(os.path.join(working_dir, '.customsroot')):
        try:
            working_dir = os.path.dirname(working_dir)
        except Exception:
            break
        if not working_dir.replace("/", ""):
            break

    if os.path.isfile(os.path.join(working_dir, '.customsroot')):
        current_customs = os.path.basename(working_dir)
        if current_customs != os.environ['CUSTOMS']:
            _askcontinue("""Caution: current customs is {} but you are in another customs directory: {}
Continue at your own risk!""".format("$CUSTOMS", "$LOCAL_WORKING_DIR")
                         )


def _askcontinue(msg=None):
    if msg:
        print(msg)
    if options.force or os.getenv("FORCE_CONTINUE", "0") == "1":
        return
    raw_input("Continue? (Ctrl+C to break)")

def _file2env(filepath):
    if not os.path.exists(filepath):
        return
    config = MyConfigParser(filepath)
    for k in config.keys():
        os.environ[k] = config[k]

def _collect_settings_files():
    files = []
    files.append(os.path.join(dirs['odoo_home'], 'machines/defaults'))
    for root, _, filenames in os.walk(dirs['odoo_home']):
        for filename in filenames:
            if filename == 'default.settings':
                files.append(os.path.join(root, filename))
    customs_dir = odoo_config.customs_dir()
    if os.path.exists(os.path.join(customs_dir, 'settings')):
        files.append(os.path.join(customs_dir, 'settings'))
    if os.path.exists('/etc_host/odoo/settings'):
        files.append('/etc_host/odoo/settings')
    if os.path.exists('/etc_host/odoo/{}/settings'.format(os.environ['CUSTOMS'])):
        files.append('/etc_host/odoo/{}/settings'.format(os.environ['CUSTOMS']))
    for filename in os.listdir(dirs['settings.d']):
        filepath = os.path.join(dirs['settings.d'], filename)
        if os.path.exists(filepath):
            files.append(filepath)
    return files

def _make_settings_file(outfile, setting_files):
    """
    Puts all settings into one settings file
    """
    c = MyConfigParser(outfile)
    for file in setting_files:
        if not file:
            continue
        c2 = MyConfigParser(file)
        c.apply(c2)
    c.write()

def _export_settings():
    if args and args[0] == 'compose':
        if len(args) > 1:
            customs = args[1]
            with open(files['settings'], 'w') as f:
                f.write("CUSTOMS=" + customs)
    _file2env(files['settings'])

    if not os.path.exists(files['settings']):
        raise Exception("Please call ./odoo compose <CUSTOMS> initially.")

    # get odoo version
    ODOO_VERSION = odoo_config.get_version_from_customs(os.environ['CUSTOMS'])
    os.environ['ODOO_VERSION'] = ODOO_VERSION
    if ODOO_VERSION in ["6.0", "6.1", "7.0", "8.0", "9.0"]:
        os.environ['ODOO_PYTHON_VERSION'] = '2'
        os.environ['ODOO_EXECUTABLE'] = 'openerp-server'
    elif ODOO_VERSION in ["10.0"]:
        os.environ['ODOO_PYTHON_VERSION'] = '2'
        os.environ['ODOO_EXECUTABLE'] = 'odoo-bin'
    elif ODOO_VERSION in ['11.0']:
        os.environ['ODOO_PYTHON_VERSION'] = '3'
        os.environ['ODOO_EXECUTABLE'] = 'odoo-bin'
    else:
        raise Exception("not impl: {}".format(ODOO_VERSION))

    setting_files = _collect_settings_files()
    _make_settings_file(files['settings'], setting_files)
    config = MyConfigParser(files['settings'])
    if "DBNAME" not in config.key():
        config['DBNAME'] = config['CUSTOMS']
        config.write()
    _file2env(files['settings'])


def docommand(cmnd):
    out = subprocess.check_output(cmd, cwd=dirs['odoo_home'])
    return out

def dcexec(cmd):
    cmd = [commands['dc'], 'exec', '-T'] + cmd
    out = subprocess.check_output(cmd, cwd=dirs['odoo_home'])
    return out

def dc(cmd):
    cmd = [commands['dc']] + cmd
    out = subprocess.check_output(cmd, cwd=dirs['odoo_home'])
    return out

def dcrun(cmd):
    cmd = [commands['dc'], 'run', '--rm', '-T', '-e ODOO_HOME=/opt/odoo'] + cmd
    return dc(cmd)

def _remember_customs_and_cry_if_changed():
    # if customs changed, then restart is required

    out = dcexec(['odoo env'])
    out = [x for x in out.split('\n') if "CUSTOMS="]
    if out:
        current_customs = out[0].split("=")[-1]
        if current_customs != os.environ['CUSTOMS']:
            print("Customs changed - you need to restart and/or rebuild!")
            docommand(commands['manage'], 'kill')

"""


function restore_check() {
    dumpname="$(basename "$1")"
    local force=0

    # asterisk as one word, @ as separate words
    echo "${ALL_PARAMS[*]}" |grep -P -q '[-]force' && {
        force=1
    }

    if [[ ! "${dumpname%.*}" == *"$DBNAME"* ]]; then
        echo "The dump-name \"$dumpname\" should somehow match the current database \"$DBNAME\", which isn't."
        exit -1
    fi

    return 0
}

function exists_db() {
    sql=("select 'database_exists' from pg_database where datname='$DBNAME'")
    if FORCE_UNVERBOSE=1 echo "${sql[0]}"| $MANAGE psql template1 | grep -q 'database_exists'
    then
        echo 'database exists'
    else
        echo 'database does not exist'
    fi

    return 0
}

function remove_postgres_connections() {
    echo "Removing all current connections"

    if [[ "$(exists_db)" != "database does not exist" ]]; then
        SQL=$(cat <<-EOF
            SELECT pg_terminate_backend(pg_stat_activity.pid)
            FROM pg_stat_activity 
            WHERE pg_stat_activity.datname = '$DBNAME' 
            AND pid <> pg_backend_pid(); 
EOF
            )
        echo "$SQL" | $MANAGE psql template1
    fi

    return 0
}

function reset_postgres_container () {
    # remove the postgres volume and reinit
	if [[ "$RUN_POSTGRES" == 1 ]]; then
        echo "Resettings postgres - killing data - not reversible"
        $MANAGE kill
        $dc rm -f # set volume free
        VOLUMENAME=${CUSTOMS}_postgresdata
        docker volume ls |grep -q "$VOLUMENAME" && docker volume rm "$VOLUMENAME"
        $MANAGE reset-db
        $MANAGE up -d postgres
        $MANAGE wait_for_container_postgres
	fi

}

function do_restore_db_on_postgres () {
    SUFFIX="_restoring"
    DBNAME_TARGET="$DBNAME"
    DBNAME="${DBNAME}${SUFFIX}"
    export DBNAME="$DBNAME"
    dump_file=/host/dumps/$1
    set -e

    if [[ ! -e "$dump_file" ]]; then
        echo "File $dump_file not found!"
        exit 1
    fi

    echo "Restoring dump on $DB_HOST"
    echo "Using Host: $DB_HOST, Port: $DB_PORT, User: $DB_USER, ...."
    export PGPASSWORD=$DB_PWD
    local args="-h $DB_HOST -p $DB_PORT -U $DB_USER"
    DROPDB="dropdb $args"
    CREATEDB="createdb $args"
    PGRESTORE="pg_restore --no-owner --no-privileges --no-acl  --single-transaction --exit-on-error $args"
    PSQL="psql $args"

    eval "$DROPDB --if-exists $DBNAME" || echo "Failed to drop $DBNAME"
    eval "$CREATEDB $DBNAME"

    method="$PGRESTORE"
    needs_unzip=1
    gunzip -c "$dump_file" | head | grep -q PostgreSQL.database.dump && {
        method="$PSQL"
    }
    if [[ "$method" != "psql" ]]; then
        head "$dump_file" | grep -q PostgreSQL.database.dump && {
            needs_unzip=0
            method="$PSQL"
        }
    fi

    if [[ "$needs_unzip" == "1" ]]; then
        pipe=$(mktemp -u)
        mkfifo "$pipe"
        gunzip -c  "$dump_file" > "$pipe" &
    else
        pipe="$dump_file"
    fi
	echo "Restoring $DBNAME using $method..."
	$method -d "$DBNAME" < "$pipe"

    remove_postgres_connections
    sql=("
        SELECT pg_terminate_backend(pg_stat_activity.pid)
        FROM pg_stat_activity 
        WHERE pg_stat_activity.datname = '$DBNAME_TARGET' 
        AND pid <> pg_backend_pid(); 

        drop database if exists $DBNAME_TARGET;
        alter database $DBNAME rename to $DBNAME_TARGET;
        ")
    echo "${sql[0]}"| $MANAGE psql template1

    DBNAME="$DBNAME_TARGET"
    export DBNAME="$DBNAME"
    remove_postgres_connections

    return 0
}

function do_restore_files () {
    # remove the postgres volume and reinit
    filepath=$1

    filepath=$(make_path_as_hosts_sees_it "$filepath")
    RESTOREFILE=/tmp/archive
    dcrun -v "$filepath:$RESTOREFILE" odoo /bin/restore_files.sh
    return 0
}

function showhelp() {
    echo Management of odoo instance
    echo
    echo
    echo ./odoo sanity-check
    echo Reinit fresh db:
    echo './odoo reset-db'
    echo
    echo Update:
    echo './odoo update [module]'
    echo 'Just custom modules are updated, never the base modules (e.g. prohibits adding old stock-locations)'
    echo 'Minimal downtime - but there is a downtime, even for phones'
    echo 
    echo "Please call odoo springclean|update|backup|run_standalone|upall|attach_running|rebuild|restart"
    echo ""
    echo "abort-upgrade"
    echo ""
    echo "attach <machine> - attaches to running machine"
    echo ""
    echo "backup <backup-dir> - backup database and/or files to the given location with timestamp; if not directory given, backup to dumps is done "
    echo ""
    echo "backup-db <backup-dir>"
    echo ""
    echo "backup-files <backup-dir>"
    echo ""
    echo "debug <machine-name> - starts /bin/bash for just that machine and connects to it; if machine is down, it is powered up; if it is up, it is restarted; as command an endless bash loop is set"
    echo ""
    echo "dev - starts developing in the odoo container"
    echo ""
    echo "build - no parameter all machines, first parameter machine name and passes other params; e.g. ./odoo build asterisk --no-cache"
    echo ""
    echo "link - links all modules into ./links"
    echo ""
    echo "telegram-setup- helps creating a permanent chatid"
    echo ""
    echo "kill - kills running machines"
    echo ""
    echo "logs - show log output; use parameter to specify machine"
    echo ""
    echo "logall - shows log til now; use parameter to specify machine"
    echo ""
    echo "springclean - remove dead containers, untagged images, delete unwanted volums"
    echo ""
    echo "rm - command"
    echo ""
    echo "compose - just build the big docker-compose file"
    echo ""
    echo "rebuild - rebuilds docker-machines - data not deleted"
    echo ""
    echo "restart - restarts docker-machine(s) - parameter name"
    echo ""
    echo "restore <filepathdb> <filepath_tarfiles> [-force] - restores the given dump as odoo database"
    echo ""
    echo "restore-dev-db - Restores database dump regularly and then applies scripts to modify it, so it can be used for development (adapting mailserver, disable cronjobs)"
    echo ""
    echo "runbash <machine name> - starts bash in NOT RUNNING container (a separate one)"
    echo ""
    echo "setup-startup makes skript in /etc/init/${CUSTOMS}"
    echo ""
    echo "stop - like docker-compose stop"
    echo ""
    echo "quickpull - fetch latest source, oeln - good for mako templates"
    echo ""
    echo "turn-into-dev - applies scripts to make the database a dev database"
    echo ""
    echo "update <machine name>- fetch latest source code of modules and run update of just custom modules; machines are restarted after that"
    echo ""
    echo "up - starts all machines equivalent to service <service> start "
    echo ""
    echo "remove-web-assets - if odoo-web interface is broken (css, js) then purging the web-assets helps; they are recreated on odoo restart"
    echo ""
    echo "fix-permissions - sets user 1000 for odoo and odoo_files"
    echo ""
    echo "show-install-state "
    echo ""
    echo "make-customs"
    echo
    echo "patch - run without arguments for help"
    echo ""
    echo "version - run without arguments for help"
    echo ""
}

if [ -z "$1" ]; then
    showhelp
    exit -1
fi



function do_command() {
    case $1 in
    abort-upgrade)
        SQL=$(cat <<-EOF
            UPDATE ir_module_module SET state = 'installed' WHERE state = 'to upgrade';
            UPDATE ir_module_module SET state = 'uninstalled' WHERE state = 'to install';
EOF
            )
        echo "$SQL" | $MANAGE psql "$DBNAME"

        ;;
    setup-startup)
        local_PATH=$DIR

        if [[ -e /sbin_host/initctl ]]; then
            # ubuntu 14.04 upstart
            file=/etc_host/init/${CUSTOMS}_odoo.conf

            echo "Setting up upstart script in $file"
            /bin/cp "$DIR/config/upstart" "$file"
            /bin/sed -i -e "s|\${PATH}|$local_PATH|" -e "s|\${PATH}|$local_PATH|" "$file"
            /bin/sed -i -e "s|\${CUSTOMS}|$CUSTOMS|" -e "s|\${CUSTOMS}|$CUSTOMS|" "$file"
            echo "Please execute on Host:"
            echo "/sbin/initctl reload-configuration"
        else
            echo "Setting up systemd script for startup"
            servicename=${CUSTOMS}_odoo.service
            # file=/etc_host/systemd/system/$servicename
            file=/tmp_host/$servicename

            # echo "Setting up upstart script in $file"
            /bin/cp "$DIR/config/systemd" "$file"
            /bin/sed -i -e "s|\${PATH}|$local_PATH|" -e "s|\${PATH}|$local_PATH|" "$file"
            /bin/sed -i -e "s|\${CUSTOMS}|$CUSTOMS|" -e "s|\${CUSTOMS}|$CUSTOMS|" "$file"

            echo "Please execute on host now (perhaps as sudo):"
            echo "cp /tmp/$servicename /etc/systemd/system"
            echo "systemctl stop $servicename"
            echo "systemctl disable $servicename"
            echo "systemctl daemon-reload"
            echo "systemctl reset-failed"
            echo "systemctl enable $servicename"
            echo "systemctl start $servicename"
        fi
        ;;
    exec)
        $dc exec "${ALL_PARAMS[@]}"
        ;;
    backup-db)
        set -e
        if [[ -n "${ALL_PARAMS[0]}" ]]; then
            filename="${ALL_PARAMS[0]}"
        else
            filename=$DBNAME.$(date "+%Y-%m-%d_%H%M%S").dump.gz
        fi
        if [[ "$filename" == *\/* ]]; then
            echo "No slash for backup filename allowed"
            exit 1
        fi
        BACKUPDIR=/host/dumps
        echo "Databasename is $DBNAME"
        filepath=$BACKUPDIR/$filename
        if [[ -e "$filepath" ]]; then
            rm "$filepath" || {
                echo "Could not remove existing dump file"
                exit 1
            }
        fi
        LINKPATH=$DIR/dumps/latest_dump
		if [[ "$RUN_POSTGRES" == "1" ]]; then
			$dc up -d postgres
			$MANAGE wait_for_container_postgres
        fi
        pg_dump -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -Z0 -Fc "$DBNAME" | pigz --rsyncable > "$filepath"
		if [[ "$NO_BACKUP_SYMBOLIC_LINK_DUMP" != "1" ]]; then
            if [[ -e "$LINKPATH" ]]; then
                /bin/rm "$LINKPATH"
            fi
			ln -s "$filepath" "$LINKPATH" > /dev/null 2>&1
		fi
        md5sum "$filepath"
        echo "Dumped to $filepath"
		$MANAGE telegram-send "Database Backup $DBNAME done to $filepath"
        ;;
    backup-files)
        if [[ -n "$2" ]]; then
            BACKUPDIR=$2
        else
            BACKUPDIR=$DIR/dumps
        fi
        BACKUP_FILENAME=$CUSTOMS.files.tar.gz
        BACKUP_FILEPATH=$BACKUPDIR/$BACKUP_FILENAME

		dcrun odoo /backup_files.sh
        [[ -f $BACKUP_FILEPATH ]] && rm -Rf "$BACKUP_FILEPATH"
        mv "$DIR/dumps/odoofiles.tar" "$BACKUP_FILEPATH"

        echo "Backup files done to $BACKUP_FILEPATH"
        ;;

    backup)
		$MANAGE backup-db "${ALL_PARAMS[@]}"
		$MANAGE backup-files "${ALL_PARAMS[@]}"
        ;;
    reset-db)
		echo "$*" |grep -q '[-]force' || {
            askcontinue "Deletes database $DBNAME!"
		}
		if [[ "$RUN_POSTGRES" != "1" ]]; then
			echo "Postgres container is disabled; cannot reset external database"
			exit -1
		fi
        echo "Stopping all services and creating new database"
        echo "After creation the database container is stopped. You have to start the system up then."
        $dc kill
        dcrun -e INIT=1 postgres /entrypoint2.sh
        echo
        echo 
        echo
        echo "Database initialized."

        ;;

	restore-files)
		set -e
		dumpfile=$(make_path_accessible_from_container_but_file_is_outside "$2")
        if [[ -z "$2" ]]; then
			echo "Please provide the tar file-name."
			exit -1
        fi
		echo 'Extracting files...'
		do_restore_files "$dumpfile"
		;;

	restore-db)
		set -e
		echo "DB_HOST: $DB_HOST"
		echo "DB_PORT: $DB_PORT"
		dumpfile="${ALL_PARAMS[0]}"
		restore_check "$dumpfile"
        if [[ "$dumpfile" == *\/* ]]; then
            echo "No slash for backup filename allowed"
            exit 1
        fi

		if [[ "$DEVMODE" == "1" && "$RESTORE_DEV_DB" != "1" ]]; then
			askcontinue "DEVMODE ist set - really restore as normal db? Not using restore-dev-db?"
		fi

		echo "$*" |grep -q '[-]force' || {
			askcontinue "Deletes database $DBNAME!"
		}

        reset_postgres_container
        do_restore_db_on_postgres "$dumpfile"

		remove_postgres_connections
		set_db_ownership
		$MANAGE telegram-send "Database Restore $DBNAME done."

		;;
	set_db_ownership)
		set_db_ownership
		;;

	proxy-reload)
        local ok
        ok=xxxx
        [$dc ps -q proxy ] && {
            dcexec proxy /opt/bin/hot_reload.sh
        } || {
            :
        }
		;;

    restore-dev-db)
		if [[ "$ALLOW_RESTORE_DEV" ]]; then
			echo "ALLOW_RESTORE_DEV must be explicitly allowed."
			exit -1
		fi
        echo "Restores dump to $DB_HOST and executes to scripts to adapt user passwords, mailservers and cronjobs"
		export RESTORE_DEV_DB=1
		set +e
		$MANAGE restore-db "${ALL_PARAMS[@]}" || true # ignore restore errors like not found user and so
		$MANAGE turn-into-dev "${ALL_PARAMS[@]}"

        ;;
	turn-into-dev)
		if [[ "$DEVMODE" != "1" ]]; then
			echo "When applying this sql scripts, the database is not usable anymore for production environments. "
			echo "Please set DEVMODE=1 to allow this"
			exit -1
		fi
        SQLFILE=machines/postgres/turndb2dev.sql
		$MANAGE psql "$DBNAME" < $SQLFILE
		
		;;
	psql)
		# gets sql query from pipe
		# check if there is a pipe argument
		local query=""
		if [[ ! -t 0 ]]; then  # checks if there is pipe data https://unix.stackexchange.com/questions/33049/check-if-pipe-is-empty-and-run-a-command-on-the-data-if-it-isnt
			query="$(cat /dev/stdin)"
		fi	

		if [[ "$RUN_POSTGRES" == "1" ]]; then
			$dc up -d postgres
			$MANAGE wait_for_container_postgres
            SQLFILE="$DIR/run/sqlscripts/script.sql"
            echo "$query" | tee "$SQLFILE"

            dcexec postgres gosu postgres psql "${ALL_PARAMS[*]}" -U "$DB_USER" -f "/opt/sqlscripts/$(basename "$SQLFILE")"
            rm "$SQLFILE"
		else
			export PGPASSWORD=$DB_PWD
			echo "$query" | psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -w "${ALL_PARAMS[@]}"
		fi 
		;;

    springclean)
        docker system prune

        echo removing dead containers
		docker ps -a -q | while read -r id; do
			docker rm "$id"
		done

        echo Remove untagged images
        docker images | grep "<none>" | awk '{ print "docker rmi " $3 }' | bash

        echo "delete unwanted volumes (can pass -dry-run)"
		docker images -q -f='dangling=true' | while read -r id; do
			docker rmi "$id"
		done
        ;;
    up)
		set_db_ownership
        $dc up "${ALL_PARAMS[@]}"
		$MANAGE proxy-reload
        ;;
    debug)
		# puts endless loop into container command and then attaches to it;
		# by this, name resolution to the container still works
        if [[ -z "$2" ]]; then
            echo "Please give machine name as second parameter e.g. postgres, odoo"
            exit -1
        fi
		set_db_ownership
        echo "Current machine $2 is dropped and restartet with service ports in bash. Usually you have to type /debug.sh then."
        askcontinue
        # shutdown current machine and start via run and port-mappings the replacement machine
		$MANAGE kill "$2"
        cd "$DIR"
		DEBUGGING_COMPOSER=$DIR/run/debugging.yml
		cp "$DIR/config/debugging/template.yml" "$DEBUGGING_COMPOSER"
		sed -i -e "s/\${CUSTOMS}/$CUSTOMS/" -e "s/\${NAME}/$2/" "$DEBUGGING_COMPOSER"
		dc="$dc -f $DEBUGGING_COMPOSER"  # command now has while loop

        #execute self
		$dc up -d "$2"
		$MANAGE attach "$2"

        ;;
    attach)
        if [[ -z "$2" ]]; then
            echo "Please give machine name as second parameter e.g. postgres, odoo"
            exit -1
        fi
		display_machine_tips "$2"
        $dc exec "$2" bash
        ;;
    run)
		set_db_ownership
        $dc run "${ALL_PARAMS[@]}"
		;;
    runbash)
        if [[ -z "$2" ]]; then
            echo "Please give machine name as second parameter e.g. postgres, odoo"
            exit -1
        fi
		set_db_ownership
		display_machine_tips "$2"
        $dc run --rm "$2" bash
        ;;
    rebuild)
        cd "$DIR"
        $dc build --no-cache "${ALL_PARAMS[@]}"
        ;;
    build)
        cd "$DIR"
        $dc build "${ALL_PARAMS[@]}"
        ;;
	force-kill)
		if [[ -z "$2" ]]; then
			echo "Please provide machine name."
			exit 1
		fi
        eval "$dc kill $2"
		;;
    kill)
        cd "$DIR"
		if [[ -z "$2" ]]; then
			eval "$dc stop -t 20 redis"  # persist data
			if [[ "$RUN_POSTGRES" == "1" ]]; then
				eval "$dc stop -t 20 postgres"
			fi
		fi
		eval "$dc stop -t 10 $2 $3 $4 $5 $6 $7 $8 $9"
        ;;
    stop)
        cd "$DIR"
        eval "$dc stop $2 $3 $4"
        ;;
    logsn)
        cd "$DIR"
        eval "$dc logs --tail=$2 -f -t $3 $4"
        ;;
    logs)
        cd "$DIR"
        lines="${ARGS[-1]}"
        if [[ -n ${lines//[0-9]/} ]]; then
            lines="5000"
        else
            echo "Showing last $lines lines"
        fi
        eval "$dc logs --tail=$lines -f -t $2 "
        ;;
    logall)
        cd "$DIR"
        eval "$dc logs -f -t $2 $3"
        ;;
    rm)
        cd "$DIR"
        $dc rm "${ALL_PARAMS[@]}"
        ;;
    restart)
        cd "$DIR"
        eval "$dc stop $2"
        eval "$dc rm -f $2"
        eval "$dc up --force-recreate -d $2"
        $MANAGE proxy-reload
        ;;

    dev)
        if [[ -n "${ALL_PARAMS[0]}" ]]; then
            $MANAGE compose "${ALL_PARAMS[@]}"
        fi
        $MANAGE kill
        $MANAGE rm -f
        $MANAGE build
        $MANAGE up -d
        $MANAGE attach odoo
        ;;

    telegram-setup)
        if [[ "$TELEGRAM_ENABLED" == "1" ]]; then
            export DIR="$DIR"
            cd "$DIR"/config/telegrambot
            docker-compose run telegrambot /setup.sh
        fi
        ;;
    telegram-send)
        if [[ "$TELEGRAM_ENABLED" == "1" ]]; then
            export DIR="$DIR"
            cd "$DIR"/config/telegrambot
            docker-compose run telegrambot /send.py "$2"
        fi
        ;;
    fix-permissions)
        if [[ -d "$ODOO_FILES" && -n "$ODOO_FILES" ]]; then
            chown "1000" -R "$ODOO_FILES"
        fi
        CUSTOMS_DIR=$(get_CUSTOMS_DIR)
        if [[ -d "$CUSTOMS_DIR" && -n "$CUSTOMS_DIR" ]]; then
            chown "$USER" -R "$CUSTOMS_DIR"
        fi

        ;;
    update)

        $MANAGE abort-upgrade

        echo "Run module update"
        if [[ -n "$ODOO_UPDATE_START_NOTIFICATION_TOUCH_FILE_IN_CONTAINER" ]]; then
            date +%s > "$ODOO_UPDATE_START_NOTIFICATION_TOUCH_FILE_IN_CONTAINER"
        fi
        # running duplicate updates is really a problem;
        $dc kill 
        $dc rm -f
        $dc create --force-recreate
        if [[ "$RUN_POSTGRES" == "1" ]]; then
            $dc up -d postgres
            $MANAGE wait_for_container_postgres
        fi

        dcrun odoo_update /update_modules.sh "$2" || {
            res="$?"
            echo "Error at /update_modules.sh - aborting update process."
            exit $res
        }
        $MANAGE show-install-state || exit 34

        for i in $(seq 5);
        do
            $dc up -d
            $MANAGE proxy-reload
            sleep 2
        done

        df -h / # case: after update disk / was full
        if [[ -n "$ODOO_UPDATE_START_NOTIFICATION_TOUCH_FILE_IN_CONTAINER" ]]; then
            echo '0' > "$ODOO_UPDATE_START_NOTIFICATION_TOUCH_FILE_IN_CONTAINER"
        fi
        $MANAGE telegram-send "Update done" # &> /dev/null

       ;;

    show-install-state)
        SQL=$(cat <<-EOF
            SELECT name, state from ir_module_module where state not in ('installed', 'uninstalled');
EOF
            )
        echo "Displaying dangling modules:"
        echo "$SQL" | $MANAGE psql "$DBNAME"

        has_dangling=$(echo "$SQL" | $MANAGE psql "$DBNAME" | grep "(0 rows)")
        if [[ -z "$has_dangling" ]]; then
            echo "Dangling modules detected - please fix installation problems and retry!"
            exit -32
        fi
        ;;

    get_all_langs)
        SQL="select code from res_lang;"
        langs=$(echo "$SQL" | $MANAGE psql --tuples-only "$DBNAME")
        echo $langs
        ;;

    export-i18n|export_i18n)
        LANG=$2
        MODULES=$3
        if [[ -z "$MODULES" ]]; then
            echo "Syntax: export-i18n LANG MODULES"
            exit -1
        fi
        dcrun odoo /export_i18n.sh "$LANG" "$MODULES"
        # file now is in $DIR/run/i18n/export.po
        ;;

    import-i18n)
        dcrun odoo /import_i18n.sh "${ALL_PARAMS[@]}"
        ;;

    remove-web-assets)
        askcontinue
        dcrun odoo bash -c "cd ./admin/module_tools; python -c'from module_tools import remove_webassets; remove_webassets()'"
        echo
        echo
        echo "Please login as admin, so that assets are recreated."
        echo
        echo
        echo
        ;;
    sanity_check)
        sanity_check
        ;;
    make_customs)
        set -e
        askcontinue
        $MANAGE kill
        CUSTOMS=$2
        VERSION=$3
        "$DIR/admin/module_tools/make_customs" "$2" "$3"
        cd "$DIR/admin/module_tools"
        python <<- END
import odoo_config
odoo_config.set_customs("$2")
END

        cd "$DIR/customs/$2"
        git submodule add https://github.com/odoo/odoo odoo
        cd odoo
        git checkout "$VERSION"
        "$DIR/admin/OCA-all"
        "$DIR/admin/odoo-submodule tools,web_modulesroduct_modules,calendar_ics"
        "$DIR/$MANAGE" up -d
        chromium-browser http://localhost

        ;;
    OCA)
        "$DIR/admin/OCA" "${ALL_PARAMS[@]}"
        ;;
    compose)
        echo "Built the docker-compose file."
        ;;
    simplebash)
        if [[ "${#ALL_PARAMS[@]}" == "0" ]]; then
            bash --noprofile
        else
            bash --noprofile -c "${ALL_PARAMS[*]}"
        fi
        ;;
    test)
        echo 'reached the command area'
        echo "DIR is: $DIR"
        echo "CUSTOMS is: $CUSTOMS"
        sudo echo "This was sudoed"
        echo "Here is pgpassfile: $PGPASSFILE"
        echo "Now calling simple psql"
        SQL=$(cat <<-'            EOF'
            select state, count(*) from ir_module_module group by state;
            EOF
            )
        echo "$SQL" | $MANAGE psql "$DBNAME"
        ;;
    test_make_error)
        echo "now throwing exit code"
        exit -123
        ;;
    progress)
        SQL=$(cat <<-EOF
            select state, count(*) from ir_module_module group by state;
EOF
            )
        echo "$SQL" | $MANAGE psql "$DBNAME"

        ;;
    prepare)
        echo "All configurations prepared."
        ;;
    link)
        python "$DIR/admin/link_modules"
        ;;

    patch)
        CUSTOMS_DIR=$(get_CUSTOMS_DIR)
        cd "$CUSTOMS_DIR/odoo" || exit 1
        cmd=("$DIR/admin/odoo-patch")
        cmd+=("${ALL_PARAMS[@]}")
        eval "${cmd[@]@Q}"
        ;;
    wait_for_port)
        __wait_for_port(.......)
        started=$(date +"%s")
        while ! nc -q 1 "$2" "$3" </dev/null; do 
            sleep 1;
            now=$(date +"%s")
            (( elapsed = ("$now" - "$started") % 5))
            if [[ "$elapsed" == "0" ]]; then
                echo "Waiting for $2 on port $3..."
            fi

            if [[ "$elapsed" -gt 20 ]]; then
                echo "Waiting too long for $2 on port $3. Exiting with error-code."
                exit 20
            fi
        done
        ;;
    wait_for_container_postgres)
        $MANAGE wait_for_port postgres 5432
        ;;

    dirty)
        cmd=("$DIR/admin/module_tools/odoo-versioning")
        cmd+=("dirty")
        eval "${cmd[@]@Q}"
        ;;
    stage)
        cmd=("$DIR/admin/module_tools/odoo-versioning")
        cmd+=("stage-ticket")
        cmd+=( "${ALL_PARAMS[@]}" )
        eval "${cmd[@]@Q}"
        ;;
    deploy)
        cmd=("$DIR/admin/module_tools/odoo-versioning")
        cmd+=("deploy-ticket")
        cmd+=( "${ALL_PARAMS[@]}" )
        eval "${cmd[@]@Q}"
        ;;
    versioning)
        cmd=("$DIR/admin/module_tools/odoo-versioning")
        cmd+=( "${ALL_PARAMS[@]}" )
        eval "${cmd[@]@Q}"
        ;;
    new-ticket|switch-ticket|mergeto|deploy-ticket|stage-ticket|commit|incversions|current-ticket|open-tickets)
        cmd=("$DIR/admin/module_tools/odoo-versioning")
        cmd+=("$1")
        cmd+=( "${ALL_PARAMS[@]}" )
        eval "${cmd[@]@Q}"
        ;;

    pull)
        CUSTOMS_DIR=$(get_CUSTOMS_DIR)
        cd "$CUSTOMS_DIR" || exit -1

        if [[ -z "${ALL_PARAMS[0]}" ]]; then
            echo "Please provide the submodule name."
            exit -1
        fi
        if [[ ! -d ".git" ]]; then
            echo "No local git repo - where are you?"
            exit -1
        fi

        module="${ALL_PARAMS[0]}"
        git subtree pull --message "SUBTREE-PULL $module" --prefix="common/$module" --squash git.mt-software.de:"/git/openerp/modules/$module" master
        ;;

    pull-all)
        CUSTOMS_DIR=$(get_CUSTOMS_DIR)
        cd "$CUSTOMS_DIR" || exit -1

        if [[ -z "${ALL_PARAMS[0]}" ]]; then
            echo "Please provide the submodule name."
            exit -1
        fi
        if [[ ! -d ".git" ]]; then
            echo "No local git repo - where are you?"
            exit -1
        fi

        all_trees=$(git log | grep git-subtree-dir | awk '{ print $2 }') # | awk '{ split($0,a,"/"); print a[2]}')
        readarray -t all_tres <<<"$all_trees"

        for tree in "${all_tres[@]}"; do
            git subtree pull --message "SUBTREE-PULL $tree" --prefix="$tree" --squash # git.mt-software.de:"/git/openerp/modules/$1" master
        done

        ;;

    push)
        CUSTOMS_DIR=$(get_CUSTOMS_DIR)
        cd "$CUSTOMS_DIR" || exit -1

        if [[ -z "${ALL_PARAMS[0]}" ]]; then
            echo "Please provide the submodule name."
            exit -1
        fi

        cd "$CUSTOMS_DIR"
        module="${ALL_PARAMS[0]}"
        git subtree push --prefix="common/$module" git.mt-software.de:"/git/openerp/modules/$module" master

        ;;

    rmpyc)
        CUSTOMS_DIR=$(get_CUSTOMS_DIR)
        cd "$CUSTOMS_DIR" || exit -1
        find . -name *.pyc -delete
        ;;


    submodule)
        CUSTOMS_DIR=$(get_CUSTOMS_DIR)

        if [[ -z "${ALL_PARAMS[0]}" ]]; then
            echo "Please provide the submodule name."
            exit -1
        fi

        cd "$CUSTOMS_DIR"
        if [[ ! -d common ]]; then
            echo "Directory common not found - are you in root?"
            exit 1
        fi

        if [[ ! -d ".git" ]]; then
            git init .
        fi

        for i in ${ALL_PARAMS[0]//,/ };
        do
            git subtree add --prefix="common/$i" --squash git.mt-software.de:"/git/openerp/modules/$i" master
        done
        ;;

    update-ast)
        if [[ "$PLATFORM" == "OSX" ]]; then
            echo "Update is extreme slow on osx due to share performance. Please use following command natively:"
            echo
            echo
            echo 'time PYTHONPATH=$ODOO_HOME/admin/module_tools python -c "from odoo_parser import update_cache; update_cache()"'
            echo
            echo
            exit 2
        fi
        cd admin/module_tools
        echo "Updating ast - can take about one minute; slow on OSX due to share"
        time python -c'from odoo_parser import update_cache; update_cache()'
        ;;

    migrate)
        CUSTOMS_DIR=$(get_CUSTOMS_DIR)
        cd admin
        LOGFILE=$CUSTOMS_DIR/migration.log
        echo "$MANAGE"
        python migrate.py --log-file "$LOGFILE" --manage-command "$MANAGE" "${ALL_PARAMS[@]}"
        ;;

    *)
        echo "Invalid option $1"
        exit -1
        ;;
    esac
}


function display_machine_tips() {
    cd "$DIR"
    tipfile=$(find "machines" -name 'tips.txt' | grep -P "\/$1\/" | while read -r file; do
        echo "$DIR/$file"
    done)
    if [[ -f "$tipfile" ]]; then
        echo 
        echo Please note:
        echo ---------------
        echo
        cat "$tipfile"
        echo 
        echo
    fi

    return 0
}

function awk() {
    AWK=$(which awk)
    command "${AWK:-awk}" "$@";
    return 0
}


"""
def E(name):
    if name.startswith("$"):
        name = name[1:]
    return os.getenv(name, "")

def __file_default_content(path, default_content):
    if not os.path.exists(path):
        with open(path, 'w') as f:
            f.write(default_content)

def _remove_temp_directories():
    trace()
    for dir in os.listdir(dirs['odoo_home']):
        if dir.startswith("tmp") and len(dir) == len('tmp......'):
            shutil.rmtree(os.path.join(dirs['odoo_home']), dir)

def _prepare_filesystem():
    os.makedirs(dirs['settings.d'])
    for subdir in ['config', 'sqlscripts', 'debug', 'proxy']:
        os.makedirs(os.path.join(dirs['odoo_home']), 'run', 'subdir')
    subprocess.check_call(['sudo', '-E', 'chown', "{uid}:{uid}".format(uid=E("UID")), "-R", dirs['run']])

    __file_default_content(files['odoo_instances'], "default default\n")

def _prepare_yml_files_from_template_files():
    # replace params in configuration file
    # replace variables in docker-compose;

    if E("ODOO_MANAGER_STARTED_ONCE") != "1":
        for name in ['CUSTOMS', 'DB', 'ODOO_VERSION', 'ODOO_FILES']:
            print("{}: {}".format(name, E(name)))

    # python: find all configuration files from machines folder; extract sort
    # by manage-sort flag and put file into run directory
    # only if RUN_parentpath like RUN_ODOO is <> 0 include the machine
    #
    # - also replace all environment variables
    def find_files(dir):
        PATTERN = r'docker-compose*.yml'
        for root, _, filenames in os.walk(dirs['machines']):
            for filename in filenames:
                if re.findall(PATTERN, filename):
                    files.append(os.path.join(root, filename))
    files = []
    files += find_files(dirs['machines'])
    files += find_files(odoo_config.customs_dir())

    __prepare_docker_compose_files(files)

def __prepare_docker_compose_files():
    trace()
    local_odoo_home = os.environ['LOCAL_ODOO_HOME']
    host_odoo_home = os.environ["ODOO_HOME"]

    dest_file = sys.argv[1]
    paths = sys.argv[2].split("\n")

    temp_files = set()
    tempdir = tempfile.mkdtemp()

    if not dest_file:
        raise Exception('require destination path')

    with open(dest_file, 'w') as f:
        f.write("#Composed {}\n".format(datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        f.write("version: '{}'\n".format(os.environ['ODOO_COMPOSE_VERSION']))

    def replace_all_envs_in_file(filepath):
        with open(filepath, 'r') as f:
            content = f.read()
        all_params = re.findall(r'\$\{[^\}]*?\}', content)
        for param in all_params:
            name = param
            name = name.replace("${", "")
            name = name.replace("}", "")
            if name in os.environ:
                content = content.replace(param, os.environ[name])
        with open(filepath, 'w') as f:
            f.write(content)


    for path in set(paths):
        filename = os.path.basename(path)

        def use_file():
            if 'run_' in filename:
                run = re.findall(r'run_[^\.]*', filename)
                if run:
                    if os.getenv(run[0].upper(), "1") == "1":
                        return True
                return False
            else:
                return True

        if not use_file():
            continue

        with open(path, 'r') as f:
            content = f.read()
            # dont matter if written manage-order: or manage-order
            if 'manage-order' not in content:
                order = '99999999'
            else:
                order = content.split("manage-order")[1].split("\n")[0].replace(":", "").strip()
        folder_name = os.path.basename(os.path.dirname(path))
        if os.getenv("RUN_{}".format(folder_name.upper()), "1") == "0":
            continue

        order = str(order)

        # put all files in their order into the temp directory
        counter = 0
        temp_path = ""
        while not temp_path or os.path.exists(temp_path):
            counter += 1
            temp_path = os.path.join(tempdir, '{}-{}'.format(order, str(counter).zfill(5)))

        with open(temp_path, 'w') as dest:
            with open(path, 'r') as source:
                j = load(source.read())
                # TODO complain version - override version
                j['version'] = '3.3'

                # set settings environment and the override settings after that
                for file in ['run/settings']:
                    path = os.path.join(local_odoo_home, file)
                    if os.path.exists(path):
                        if 'services' in j:
                            for service in j['services']:
                                service = j['services'][service]
                                if 'env_file' not in service:
                                    service['env_file'] = []
                                if isinstance(service['env_file'], (str, unicode)):
                                    service['env_file'] = [service['env_file']]

                                if not [x for x in service['env_file'] if x == '$ODOO_HOME/{}'.format(file)]:
                                    service['env_file'].append('$ODOO_HOME/{}'.format(file))

                dest.write(dump(j, default_flow_style=False))
                dest.write("\n")
        replace_all_envs_in_file(temp_path)
        temp_files.add(os.path.basename(temp_path))
        del temp_path

    def post_process_complete_yaml_config(yml):
        """
        This is after calling docker-compose config, which returns the
        complete configuration.

        Aim is to take the volumes defined in odoo_base and append them
        to all odoo containers.
        """

        with open(os.path.join(local_odoo_home, 'machines/odoo/docker-compose.yml')) as f:
            odoodc = load(f.read())

        for odoomachine in odoodc['services']:
            if odoomachine == 'odoo_base':
                continue
            machine = yml['services'][odoomachine]
            for k in ['volumes']:
                machine[k] = []
                for x in yml['services']['odoo_base'][k]:
                    machine[k].append(x)
            for k in ['environment']:
                machine.setdefault(k, {})
                for x, v in yml['services']['odoo_base'][k].items():
                    machine[k][x] = v
        yml['services'].pop('odoo_base')

        return yml


# call docker compose config to get the complete config
    files = sorted(temp_files, key=lambda x: float(x.split("/")[-1].replace("-", ".")))
    cmdline = get_run_command()
    cmdline.append("/usr/local/bin/docker-compose")
    for file in files:
        cmdline.append('-f')
        cmdline.append(os.path.join(os.path.basename(tempdir), file))
    cmdline.append('config')

# annotation: per symlink all subfiles/folders are linked to a path,
# that matches the host system path
    shutil.move(tempdir, local_odoo_home)
    tempdir = os.path.join(local_odoo_home, os.path.basename(tempdir))

    try:
        proc = subprocess.Popen(cmdline, cwd=local_odoo_home, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        conf, err = proc.communicate()
        if err:
            print "==================================================================="
            print "command line: "
            for x in cmdline:
                print x
            print "==================================================================="
            print err
            print "==================================================================="
            raise Exception(err)
    except Exception:
        print cmdline
        raise
    else:
        # post-process config config
        conf = post_process_complete_yaml_config(load(conf))
        conf = dump(conf, default_flow_style=False)

        with open(dest_file, 'w') as f:
            f.write(conf)
    finally:
        shutil.rmtree(tempdir)

def __empty_dir(dir):
    for f in os.listdir(dir):
        shutil.rmtree(os.path.join(dir), f)

def _reset_proxy_configs():
    __empty_dir(dirs['run/proxy'])

def _setup_proxy():
    CONFIG_DIR = dirs['run/proxy']

    sys.path.append(dirs['machines/proxy'])
    importlib.import_module("add_upstream")
    from add_upstream import add_upstream as f_add_upstream

    def get_rules():
        for root, _, filenames in os.walk(dirs['machines']):
            for filename in filenames:
                if filename == 'upstream.path':
                    filepath = os.path.join(root, filename)
                    with open(filepath, 'r') as f:
                        for l in f.readlines():
                            if l:
                                yield filepath, l

    for filepath, rule in get_rules():
        rule = os.path.expandvars(rule)

        LOCATION, UPSTREAM = rule.strip().split(" ")

        if not LOCATION or not UPSTREAM:
            raise Exception("Invalid rule: {}".format(rule))

        parent_dir = os.path.dirname(filepath)
        if os.path.basename(parent_dir) == "odoo":
            subdir = "odoo"
            os.makedirs(os.path.join(CONFIG_DIR, subdir))

            if os.path.exists(files['odoo_instances']):
                for line in __file_get_lines(files['odoo_instances']):
                    name, domain = line.strip().split(" ")
                    filename = "{}.location".format(name)
                    CONFIG_PATH = os.path.join(CONFIG_DIR, subdir, filename)
                    if name == "default":
                        UPSTREAM_INSTANCE = UPSTREAM.replace("default", "odoo")
                    else:
                        UPSTREAM_INSTANCE = UPSTREAM.replace("odoo", "odoo_{}".format(name))
                    fi
                    f_add_upstream(LOCATION, UPSTREAM_INSTANCE, CONFIG_PATH)

        else:
            subdir = "default"
            os.makedirs(os.path.join(CONFIG_DIR, subdir))
            safe_location = LOCATION.replace("\", "_")
            filename = "{location}_{location}.location".format(location_safe_location)
            CONFIG_PATH = os.path.join(CONFIG_DIR, subdir, filename)
            f_add_upstream(LOCATION, UPSTREAM_INSTANCE, CONFIG_PATH)

def __file_get_lines(path):
    with open(path) as f:
        return f.readlines()

def __replace_in_file(filepath, text, replacewith):
    with open(filepath, 'r') as f:
        content = file.readlines()
    content = content.replace(text, replacewith)
    with open(filepath, 'w') as f:
        f.write(content)

def _setup_odoo_instances():
    if os.path.exists(files['odoo_instances']):
        __empty_dir(dirs['proxy_configs_dir'])

        if os.path.exists(files['odoo_instances']):
            for line in __file_get_lines(files['odoo_instances']):
                name, domain = line.strip().split(" ")
                config_path = os.path.join(dirs['proxy_configs_dir'], "{}.host".format(name))
                shutil.copy(files['machines/proxy/odoo_instance.conf'], config_path)
                if domain == "default":
                    __replace_in_file(config_path, "__DOMAIN__", "*")
                else:
                    if domain:
                        __replace_in_file(config_path, "__DOMAIN__", domain)
            if name:
                __replace_in_file(config_path, "__CONTAINERNAME__", name)

            if name != "default":
                # adapt the one yml file and duplicate the odoo service there;
                # removing any ports
                with open(files['docker_compose_file']) as f:
                    j = yaml.load(f.read())
                odoo = deepcopy(j['services']['odoo'])
                if 'ports' in odoo:
                    del odoo['ports']
                odoo['container_name'] = '_'.join([os.environ['CUSTOMS'], "odoo", name])
                j['services']['odoo_{}'.format(name)] = odoo
                with open(files['docker_compose_file'], 'w') as f:
                    f.write(yaml.dump(j, default_flow_style=False))

def _sanity_check():
    if not E("RUN_POSTGRES"):
        raise Exception("Please define RUN_POSTGRES")

    if E("RUN_POSTGRES") == "1" and E("DB_HOST") != "postgres":
        print("You are using the docker postgres container, but you do not have the DB_HOST set to use it.")
        print("Either configure DB_HOST to point to the docker container or turn it off by: ")
        print("RUN_POSTGRES=0")
        sys.exit(1)

    if E("OWNER_UID") == "0":
        print("Advise: you should set OWNER_UID so that dump files are marked as the correct owner")
        time.sleep(3)

    if E("RUN_POSTGRES") == "1":
        if os.path.isdir(dirs['run/restore']):
            __try_to_set_owner(E("OWNER_UID"), dirs['run/restore'])

    if E("ODOO_FILES") and os.path.isdir(E("ODOO_FILES")):
        # checking directory permissions of session files and filestorage
        __try_to_set_owner(E("OWNER_UID"), E("$ODOO_FILES"))

    # make sure the odoo_debug.txt exists; otherwise directory is created
    __file_default_content(files['run/odoo_debug.txt'], "", append_new_line=False)

    if not E("ODOO_MODULE_UPDATE_RUN_TESTS"):
        print("Please define wether to run tests on module updates by setting ODOO_MODULE_UPDATE_RUN_TESTS")
        time.sleep(2)


def __rm_file_if_exists(path):
    if os.path.exists(path):
        os.unlink(path)

def _cleanup():
    __rm_file_if_exists(files['config/docker-compose.yml')
    _remove_temp_directories

def __try_to_set_owner(UID, path):
    if os.path.isdir(path):
        uid = os.stat(path).st_uid
        if str(uid) != str(UID):
            print("Trying to set correct permissions on $dir")
            os.system("chown {} '{}'".format(UID, path))

def __start_postgres_and_wait():
    dc(["up", "-d", "postgres"])
    __wait_for_port('postgres', 5432)

def _set_db_ownership():
    # in development environments it is safe to set ownership, so
    # that accidently accessing the db fails
    if E("DEVMODE") == "1":
        if E("RUN_POSTGRES") == "1":
            __start_postgres_and_wait()
        set_ownership_exclusive()

def __wait_for_port(host, port, timeout=None):
    res = wait(port, host=host, timeout=timeout)
    if not res and timeout:
        raise Exception("Timeout elapsed waiting for {}:{}".format(host, port))


if __name__ == '__main__':
    trace()
    _startup()
    _check_working_dir_customs_mismatch
    if args:
        if args[0] == 'tool':
            from module_tools.tools import run
            run(*args)
            sys.exit(0)

    _export_settings()
    _remember_customs_and_cry_if_changed
    if args and args[0] in ['build', 'compose']:
        _remove_temp_directories()
        _prepare_filesystem()
        _prepare_yml_files_from_template_files
        _reset_proxy_configs
        _setup_proxy
        _setup_odoo_instances
    _sanity_check

    try:
        do_command "${ARGS[@]}"
    finally:
        _cleanup
