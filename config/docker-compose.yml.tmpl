# so that ./manage.sh attach {machinename} works: container_name == prefix + service-name
version: '2'
volumes:
  postgresdata:
  filestorage:
  sourcestorage:
  arisourcestorage:
  stasissourcestorage:

services:
  dns:
      build: ../machines/openvpn/openvpn_dns
      cap_add:
        - NET_ADMIN
      volumes:
        - ../data/ovpn/client:/opt/certs:ro
      networks:
        ${DCPREFIX}_default:
          ipv4_address: 4.4.4.205
  ntp:
      build: ../machines/openvpn/openvpn_ntp
      cap_add:
        - NET_ADMIN
      volumes:
        - ../data/ovpn/client:/opt/certs:ro
      networks:
        ${DCPREFIX}_default:
          ipv4_address: 4.4.4.206
      ports:
        - "123:123/UDP"
  ovpnca:
    build: ../machines/openvpn/openvpn_ca
    volumes:
        - ../config/ovpn/:/root/confs:ro
        - ../data/ovpn/CA/keys:/root/openvpn-ca/keys
        - ../data/ovpn/CA:/root/transfer
        - ../data/ovpn/server:/root/server_out
        - ../data/ovpn/client:/root/client_out
    env_file:
      - ../customs.env

  ovpn_makekeys:
    container_name: ${DCPREFIX}_ovpn_makekeys
    build: ../machines/openvpn/openvpn_server
    volumes:
        - ../config/ovpn:/root/input/confs:ro
        - ../data/ovpn/CA/keys:/root/openvpn-ca/keys:ro
        - ../data/ovpn/server:/root/server_out
        - ../data/ovpn/client:/root/client_out
        - ../config/ovpn/ccd:/root/ccd
    env_file:
      - ../customs.env

  ovpn:
    container_name: ${DCPREFIX}_ovpn
    build: ../machines/openvpn/openvpn_server
    networks:
      ${DCPREFIX}_default:
        ipv4_address: ${REMOTE_INTERNAL}
    ports:
        - "5566:1194/UDP"
    volumes:
        - ../config/ovpn:/root/input/confs:ro
        - ../data/ovpn/CA/keys:/root/openvpn-ca/keys:ro
        - ../data/ovpn/server:/root/server_out
        - ../data/ovpn/client:/root/client_out
        - ../config/ovpn/ccd:/tmp/ccd:ro

    env_file:
      - ../customs.env
    cap_add:
        - NET_ADMIN
    command: /root/tools/run.sh
    restart: on-failure

  ovpn_web:
    container_name: ${DCPREFIX}_odoo_ovpn_web
    build: ../machines/openvpn/openvpn_web
    ports:
        - "9991:8080"
    volumes:
        - ../data/ovpn/client:/root/transfer:ro
    command: python3 -m http.server 8080
    restart: on-failure

  sslproxy:
    container_name: ${DCPREFIX}_odoo_ssl_proxy
    build: ../machines/sslproxy
    
    ports:
        - "8068:8068"
    volumes:
        - ../config/sslproxy:/opt/conf
    command: python /opt/src/proxy.py

  odoo:
    container_name: ${DCPREFIX}_odoo
    build: ../machines/odoo
    restart: on-failure
    depends_on:
      - postgres
    security_opt:
      - apparmor:unconfined
    cap_add:
      - SYS_ADMIN
    networks:
      - ${DCPREFIX}_default
    links:
      - postgres:postgres
    volumes:
      - ../support_data/openerp.git:/opt/openerp.git:ro
      - ../support_data/odoo.git:/opt/odoo.git:ro
      - /opt/md5
      - sourcestorage:/opt/openerp
      - filestorage:/opt/oefiles
      - ../dumps:/opt/dumps
      - ../restore:/opt/restore
      - /opt/permanent
    environment:
      ODOO_PROD: 1
    env_file:
      - ../customs.env
      - ../fixed.env

  postgres:
    container_name: ${DCPREFIX}_postgres
    build: ../machines/postgres
    restart: on-failure
    networks:
      - ${DCPREFIX}_default
    volumes:
      - ../dumps:/opt/dumps
      - ../restore:/opt/restore
      - postgresdata:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: 1
      PGDATA: /var/lib/postgresql/data/pgdata
    env_file:
      ../customs.env

  nginx:
    container_name: ${DCPREFIX}_nginx
    image: nginx:stable
    depends_on:
      - odoo
    networks:
      - ${DCPREFIX}_default
    links:
      - odoo:odoo
    ports:
      - "${ODOO_PORT}:80"
    env_file:
      ../customs.env
    volumes:
      - ../machines/nginx/nginx.${ODOO_VERSION}conf:/mysite.template
    command: /bin/bash -c "echo 'setting up nginx conf'; cp /mysite.template /etc/nginx/conf.d/default.conf && sed -i "s/__HTTP_HOST__/$HTTP_HOST/g" /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

  mail:
    container_name: ${DCPREFIX}_mail
    build: ../machines/mail
    depends_on:
      - odoo
    networks:
      - ${DCPREFIX}_default
    expose:
      - "25"
      - "143"

  roundcube:
    container_name: ${DCPREFIX}_roundcube
    build: ../machines/roundcube
    depends_on:
      - mail
    networks:
      - ${DCPREFIX}_default
    links:
      - mail:mail
    #ports:
    #  - "8000:80"

  asterisk:
    container_name: ${DCPREFIX}_asterisk
    depends_on:
      - ovpn
    build: ../machines/asterisk/asterisk
    restart: on-failure
    networks:
      - ${DCPREFIX}_default
    expose:
      # ari
      - 8088
    #ports:
      # lsof -i -n -P
      #- "8088:8088"
      #- "5060:5060/udp"
      #- "4569:4569/udp"
      #- "2000:2000/tcp"
      #- "4520:4520/udp"
      #- "5000:5000/udp"
      # must match asterisk rtp.conf
      #- "16384-16404:16384-16404/udp"
      # next one not needed i think
      #- "63535:63535/udp"
    environment:
      CUSTOMS: ${CUSTOMS}
    volumes:
      - ../machines/asterisk/asterisk/etc/asterisk:/etc/asterisk:ro
      - ../data/ovpn/client:/opt/certs:ro
      - ../data/asterisk/moh_custom:/var/lib/asterisk/moh_custom:ro
      - ../data/asterisk/recordings:/var/spool/asterisk/recording
      - ../data/asterisk/reloader:/opt/reloader
      - ../data/asterisk/sounds:/var/lib/asterisk/sounds:ro
    env_file:
      ../customs.env
    cap_add:
        - NET_ADMIN
          
  asterisk_redis:
      build: ../machines/asterisk/redis
      container_name: ${DCPREFIX}_asterisk_redis
      networks:
        - ${DCPREFIX}_default
  stasis:
      build: ../machines/asterisk/stasis
      container_name: ${DCPREFIX}_stasis
      restart: on-failure
      env_file:
        - ../customs.env
        - ../fixed.env
      depends_on:
        - asterisk
      volumes:
        - stasissourcestorage:/opt/src
      networks:
        - ${DCPREFIX}_default
      links:
        - asterisk:asterisk
        - asterisk_redis:asterisk_redis
  ari:
    container_name: ${DCPREFIX}_ari
    build: ../machines/asterisk/ari
    restart: on-failure
    depends_on:
      - asterisk_redis
      - odoo
    ports:
      - "29925:29925/TCP"
    networks:
      - ${DCPREFIX}_default
    links:
      - asterisk:asterisk
      - asterisk_redis:asterisk_redis
      - odoo:odoo
    environment:
      ODOO_USER: admin
      ODOO_PASSWORD: 1
      ODOO_DB: $DBNAME
      ODOO_PORT: ${ODOO_PORT}
      ODOO_HOST: odoo
      USERNAME_ASTERISK: asterisk
      PASSWORD_ASTERISK: asterisk
      HOST_ASTERISK: asterisk
      PORT_ASTERISK: 8088
    volumes:
      - arisourcestorage:/opt/src
      - ../data/ari/calls:/opt/permstore/calls
      - ../data/ari/uploaded_calls:/opt/permstore/uploaded_calls
      - ../data/ari/record_clicked:/opt/permstore/record_clicked
      - ../data/asterisk/moh_custom:/opt/asterisk/moh_custom
      - ../data/asterisk/recordings:/opt/asterisk/recording
      - ../data/asterisk/reloader:/opt/asterisk/reloader
      - ../data/asterisk/sounds:/opt/asterisk/sounds
      - ../machines/asterisk/asterisk/etc/asterisk:/opt/asterisk/etc
    env_file:
      - ../customs.env
      - ../fixed.env

networks:
  ${DCPREFIX}_default:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
        - subnet: 4.4.4.0/24
          gateway: 4.4.4.1
