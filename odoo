#!/bin/bash
set +x
ARGS=( "$@" )
WORKING_DIR=$(pwd)

function startup() {
	set -e
	ODOO_HOME=$( cd "$( /usr/bin/dirname "${BASH_SOURCE[0]}" )" && pwd )
	export ODOO_HOME="$ODOO_HOME"

	eval "export $(grep PROJECT_NAME "$ODOO_HOME/settings")"

	# create empty file, so that simple bash runs
	settings_override_file="$ODOO_HOME/settings.override"
	if [[ ! -f "$settings_override_file" ]]; then
		touch "$settings_override_file"
	fi
	export HOSTNAME_TO_USE="$HOST"
}

function show_help() {
	if [[ "$1" == '--help' ]]; then
		echo "If you experience problems, try to call"
		echo ""
		echo "$ODOO_HOME/odoo --fix"
		echo ""
		echo "- docker-container admin bash is updated by that"
		exit 0
	fi
}

function fix() {
	if [[ "$1" == '--fix' ]]; then
		cd "$ODOO_HOME/config/simplebash"
		./rebuild.sh

		cd "$ODOO_HOME/config/telegrambot"
		/usr/local/bin/docker-compose build
		exit 0
	fi
}

function remove_old_bash() {
	cd "$ODOO_HOME/config/simplebash" || exit -1
	/usr/local/bin/docker-compose rm -f simplebash 1>/dev/null 2>&1
}


function build_command() {
	# using absolute path, to work in crontab
	if [[ -n "$DISPLAY" ]]; then
		xhost +local:"$HOSTNAME_TO_USE"  >/dev/null
	fi
	docker_group_id="$(cut -d : -f3 <(getent group docker))"
	command=(/usr/local/bin/docker-compose)
	command+=(run)
	command+=(--service-ports)
	command+=(--name "odoo_bash_$(/usr/bin/uuidgen)")
	command+=(-e ODOO_HOME="$ODOO_HOME")
	command+=(-e UID="$UID")
	command+=(-e USER="$USER")
	command+=(-e WORKING_DIR="${WORKING_DIR}")
	command+=(-e DOCKER_GROUP_ID="$docker_group_id")
	if [[ -n "${extra_volumes[*]}" ]]; then
		command+=( "${extra_volumes[@]}" )
	fi
	command+=(simplebash)
	command+=("$ODOO_HOME/admin/odoo-admin")
	command+=( "${ARGS[@]}" )
}

function run_command() {
	eval "${command[@]@Q}"
}

startup
show_help "${ARGS[@]}"
fix "${ARGS[@]}"
remove_old_bash
build_command
run_command
