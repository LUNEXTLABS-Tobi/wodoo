#!/bin/bash
set +x
ARGS=( "$@" )

function file2env() {
	if [[ ! -f "$1" ]]; then
		return 0
	fi

    # set variables from settings
    while read -r line; do
        # reads KEY1=A GmbH and makes export KEY1="A GmbH" basically
        [[ "$line" == '#*' ]] && continue
        [[ "$line" == '' ]] && continue
        var="${line%=*}"
        value="${line##*=}"
        eval "$var=\"$value\""
		export "$var" # export local variable to environment
    done <"$1"

	return 0
}


function startup() {
	set -e
	WORKING_DIR=${WORKING_DIR}
	LOCAL_ODOO_HOME=$( cd "$( /usr/bin/dirname "${BASH_SOURCE[0]}" )" && pwd )

	if [[ -z "$WORKING_DIR" ]]; then
		WORKING_DIR=$(realpath "$(pwd)")
	fi

	if [[ -z "$ODOO_HOME" ]]; then
		ODOO_HOME="$LOCAL_ODOO_HOME"
	fi

	export ODOO_HOME="$ODOO_HOME"
	export WORKING_DIR="$WORKING_DIR"

	# create empty file, so that simple bash runs
	settings_override_file="$LOCAL_ODOO_HOME/settings.override"
	if [[ ! -f "$settings_override_file" ]]; then
		touch "$settings_override_file"
	fi
	ODOO_UPDATE_START_NOTIFICATION_TOUCH_FILE_PATH=/tmp/update_touch_file_dummy

	file2env "$LOCAL_ODOO_HOME/settings"
	file2env "$LOCAL_ODOO_HOME/settings.override"
	export HOSTNAME_TO_USE="$HOST"

	# TODO make per docker compose option to mount non existent file mount as file
	if [[ -n "$ODOO_UPDATE_START_NOTIFICATION_TOUCH_FILE" ]]; then
		ODOO_UPDATE_START_NOTIFICATION_TOUCH_FILE_PATH=$(dirname "$ODOO_UPDATE_START_NOTIFICATION_TOUCH_FILE")
	fi
	export ODOO_UPDATE_START_NOTIFICATION_TOUCH_FILE_PATH="$ODOO_UPDATE_START_NOTIFICATION_TOUCH_FILE_PATH"

}

function show_help() {
	if [[ "$1" == '--help' ]]; then
		echo "If you experience problems, try to call"
		echo ""
		echo "$ODOO_HOME/odoo --update"
		echo ""
		echo "- docker-container admin bash is updated by that"
		exit 0
	fi
}

function update() {
	if [[ "$1" == '--update' ]]; then
		cd "$ODOO_HOME/config/simplebash"
		./rebuild.sh

		cd "$ODOO_HOME/config/telegrambot"
		/usr/local/bin/docker-compose build
		exit 0
	fi
}

function remove_old_bash() {
	cd "$LOCAL_ODOO_HOME/config/simplebash" || exit -1
	/usr/local/bin/docker-compose rm -f simplebash 1>/dev/null 2>&1
}


function build_command() {
	# using absolute path, to work in crontab
	if [[ -n "$DISPLAY" ]]; then
		xhost +local:"$HOSTNAME_TO_USE"  >/dev/null
	fi
	export WORKING_DIR="$WORKING_DIR"
	if [[ "$(uname)" == "Darwin" ]]; then
		docker_group_id="$(cut -d : -f3 <(dscl . -read /Groups/staff | awk '($1 == "PrimaryGroupID:") { print $2 }'))"
		host_type='macos'
	else
	    docker_group_id="$(cut -d : -f3 <(getent group docker))"
		host_type='linux'
	fi
	command=(/usr/local/bin/docker-compose)
	command+=(run)
	command+=(--rm)
	command+=(--service-ports)
	command+=(--name "odoo_bash_$(/usr/bin/uuidgen)")
	command+=(-e ODOO_HOME="$ODOO_HOME")
	command+=(-e UID="$UID")
	command+=(-e USER="$USER")
	command+=(-e WORKING_DIR="$WORKING_DIR")
	command+=(-e DOCKER_GROUP_ID="$docker_group_id")
	command+=(-e HOST_TYPE="$host_type")
	if [[ -n "${extra_volumes[*]}" ]]; then
		command+=( "${extra_volumes[@]}" )
	fi
	command+=(simplebash)
	command+=("/opt/odoo/admin/odoo-admin")
	command+=( "${ARGS[@]}" )
}

function run_command() {
	eval "${command[@]@Q}"
}

startup
show_help "${ARGS[@]}"
update "${ARGS[@]}"
remove_old_bash
build_command
run_command
