#!/usr/bin/python
import uuid
import sys
import os
import inspect
import subprocess
import time
import fileinput
from admin.module_tools.myconfigparser import MyConfigParser

def E(name):
    if name.startswith("$"):
        name = name[1:]
    return os.getenv(name, "")


input = None
if not sys.stdin.isatty() and "SSH_CONNECTION" not in os.environ:
    input = '\n'.join([x for x in sys.stdin])

FNULL = open(os.devnull, 'w')
LOCAL_ODOO_HOME = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory
PROJECT_NAME = LOCAL_ODOO_HOME.replace("/", "_").lstrip("_")
NETWORK_NAME = "{}_default".format(PROJECT_NAME)

os.environ['NETWORK_NAME'] = NETWORK_NAME
WORKING_DIR = E("WORKING_DIR")
SETTINGS_FILE = os.path.join(LOCAL_ODOO_HOME, 'run/settings')

if not WORKING_DIR:
    WORKING_DIR = os.getcwd()

if E("DOCKER_MACHINE") != "1":
    os.environ['ODOO_HOME'] = LOCAL_ODOO_HOME

if not E("ODOO_HOME") and E("DOCKER_MACHINE") != "1":
    ODOO_HOME = LOCAL_ODOO_HOME
else:
    ODOO_HOME = E("ODOO_HOME")

os.environ['ODOO_HOME'] = ODOO_HOME
os.environ['WORKING_DIR'] = WORKING_DIR

if len(sys.argv) > 1 and sys.argv[1] == 'compose':
    if os.path.exists(SETTINGS_FILE):
        os.unlink(SETTINGS_FILE)

config = MyConfigParser(SETTINGS_FILE)
if not os.path.exists(SETTINGS_FILE):
    config.write()

for k in config.keys():
    os.environ[k] = config[k]

os.environ['HOSTNAME_TO_USE'] = E("HOST")

if not E("CUSTOMS"):
    os.environ['CUSTOMS'] = config.get("CUSTOMS", "")

def get_platform():
    if not E("PLATFORM"):
        if "Darwin" in subprocess.check_output(["uname"]):
            os.environ['PLATFORM'] = 'macos'
        else:
            os.environ['PLATFORM'] = 'linux'
    return E("PLATFORM")


def show_help():
    if any(x == '--help' for x in sys.argv):
        print("If you experience problems, try to call")
        print("")
        print(os.path.expandvars("$ODOO_HOME/odoo --update"))
        print("")
        print("- docker-container admin bash is updated by that")
        sys.exit(0)

def update():
    if len(sys.argv) > 1 and sys.argv[1] == '--update':
        proc = subprocess.Popen([
            "/bin/bash",
            "rebuild.sh"
        ], cwd=os.path.expandvars("$ODOO_HOME/config/simplebash"))
        proc.wait()

        proc = subprocess.Popen([
            "/usr/local/bin/docker-compose",
            "build"
        ], cwd=os.path.expandvars("$ODOO_HOME/config/telegrambot"))
        proc.wait()

        sys.exit(0)

def build_command():
    # using absolute path, to work in crontab

    if E("DISPLAY"):
        try:
            subprocess.check_call([
                'xhost',
                '+local:{}'.format(E("HOSTNAME_TO_USE")),
            ], stdout=FNULL)
        except Exception:
            pass

    if get_platform() == "macos":
        raise Exception("not supported")
    else:
        # getent group docker docker:x:999:marc
        out = subprocess.check_output([
            'getent',
            'group',
            'docker',
        ])
        docker_group_id = out.split(":")[2]

    command = ['/usr/local/bin/docker-compose']
    command += ['run']
    command += ['--rm']
    command += ['--service-ports']
    command += ['--name', "odoo_bash_{}".format(str(uuid.uuid4()))]
    command += ['-e', 'SSH_CONNECTION']
    command += ['-e', 'ODOO_HOME={}'.format(E("ODOO_HOME"))]
    command += ['-e', 'UID={}'.format(os.getuid())]
    command += ['-e', 'USER={}'.format(E("USER"))]
    command += ['-e', 'WORKING_DIR={}'.format(E("WORKING_DIR"))]
    command += ['-e', 'DOCKER_GROUP_ID={}'.format(docker_group_id)]
    command += ['-e', 'PLATFORM={}'.format(get_platform())]
    if E("DOCKER_MACHINE") != "1":
        # on host
        command += ['-e', 'PROJECT_NAME={}'.format(PROJECT_NAME)]
        command += ['-e', 'NETWORK_NAME={}'.format(NETWORK_NAME)]
        command += ['-e', 'HOST_HOME={}'.format(os.environ['HOME'])]
        command += ['-e', 'HOST_ODOO_HOME={}'.format(LOCAL_ODOO_HOME)]
        if E("DUMPS_PATH") and os.path.isdir(E("DUMPS_PATH")):
            dumps_path_group_id = os.stat(E("DUMPS_PATH")).st_gid
            if os.stat(E("DUMPS_PATH")).st_uid == dumps_path_group_id:
                dumps_path_group_id = 999
        else:
            dumps_path_group_id = 999
        if E("DUMPS_PATH"):
            command += ['-v', "{}:/host/dumps".format(E("DUMPS_PATH"))]
            command += ['-e', "DUMPS_PATH_GID={}".format(dumps_path_group_id)]
        if get_platform() == 'macos':
            command += ['-v', '/private/etc:/etc_host']
            command += ['-v', '/private:/private'] # otherwise cd /etc_host/odoo does not work
        else:
            command += ['-v', '/etc:/etc_host']
        command += ['-v', '/sbin:/sbin_host']
        command += ['-v', '/tmp:/tmp_host']
    command += ['simplebash']
    command += ["/opt/odoo/admin/odoo-admin"]
    if len(sys.argv) > 1:
        command += sys.argv[1:]
    proc = subprocess.Popen(
        command,
        cwd=os.path.join(LOCAL_ODOO_HOME, 'config/simplebash'),
        bufsize=1024,
        stdin=subprocess.PIPE if input else None,
    )
    if input:
        proc.stdin.write(input)
        proc.stdin.close()
    return proc

def start_background_sync_from_host():
    if E("NO_SYNC") == "1" or E("DOCKER_MACHINE") == "1":
        return
    if "Darwin" in subprocess.check_output(["uname"]):
        if E("RUN_RSYNCED") != "1":
            print("")
            print("Warning: on macos you should turn on RUN_RSYNCED in settings.")
            print("")
            print("")
            time.sleep(3)

    if get_platform() == 'macos' or E("RUN_RSYNCED") == "1":
        if len(sys.argv) > 1 and sys.argv[1] == 'dev':
            subprocess.Popen([
                os.path.join(LOCAL_ODOO_HOME, 'admin/sync_source.py'),
                E("CUSTOMS"),
            ], stdout=None)


def check_docker_network():
    # makes sure, that docker network CUSTOMS_default really exists
    networks = subprocess.check_output([
        'docker',
        'network',
        'ls'
    ]).split("\n")
    if not any(NETWORK_NAME in line for line in networks):
        networks = subprocess.check_call([
            'docker',
            'network',
            'create',
            NETWORK_NAME,
        ])


if __name__ == '__main__':
    show_help()
    update()

    check_docker_network()
    proc = build_command()
    proc.wait()
